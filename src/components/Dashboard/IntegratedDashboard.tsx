/**
 * ููุญุฉ ุงูุชุญูู ุงููุชูุงููุฉ ุงููุญุณูุฉ
 * ูุธุงู ุฅุฏุงุฑุฉ ูุตูุญุฉ ุงูุฑู - ูุฒุงุฑุฉ ุงูููุงุฑุฏ ุงููุงุฆูุฉ ูุงูุฑู
 */

import React from 'react';
import { useApp } from '../../context/AppContext';
import { authService } from '../../services/AuthService';
import EnhancedStatsCards from './EnhancedStatsCards';
import RecentActivity from './RecentActivity';
import PerformanceMetrics from './PerformanceMetrics';
import AdvancedCharts from './AdvancedCharts';
import QuickActions from './QuickActions';
import SystemOverview from './SystemOverview';
import TopPerformers from './TopPerformers';
import AlertsNotifications from './AlertsNotifications';
import TasksChart from './TasksChart';
import CorrespondenceChart from './CorrespondenceChart';
import EmployeesChart from './EmployeesChart';
import CorrespondenceWidget from './CorrespondenceWidget';

/**
 * ูููู ููุญุฉ ุงูุชุญูู ุงููุชูุงููุฉ ุงููุญุณูุฉ
 * ูุฏูุฌ ุฌููุน ุฃูุธูุฉ ุงููุคุณุณุฉ ูู ูุงุฌูุฉ ููุญุฏุฉ
 */
const IntegratedDashboard: React.FC = () => {
  const { state } = useApp();
  const currentUser = authService.getCurrentUser();
  
  /**
   * ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช ุงููุชูุงููุฉ ูู ุฌููุน ุงูุฃูุธูุฉ
   */
  const integratedStats = React.useMemo(() => {
    // ููุชุฑุฉ ุงูุจูุงูุงุช ุญุณุจ ุตูุงุญูุงุช ุงููุณุชุฎุฏู
    let visibleTasks = state.tasks || [];
    let visibleCorrespondence = state.correspondence || [];
    let visibleEmployees = state.employees || [];
    let visibleDepartments = state.departments || [];

    // ุชุทุจูู ููุงุชุฑ ุงูุฑุคูุฉ ุญุณุจ ุงูุฏูุฑ
    if (currentUser && currentUser.role !== 'ุงุฏูู' && currentUser.role !== 'ุฑุฆูุณ_ุงููุตูุญุฉ') {
      if (currentUser.role === 'ุฑุฆูุณ_ูุทุงุน') {
        visibleTasks = visibleTasks.filter(t => t.sectorId === currentUser.sectorId);
        visibleCorrespondence = visibleCorrespondence.filter(c => c.sectorId === currentUser.sectorId);
        visibleEmployees = visibleEmployees.filter(e => e.sectorId === currentUser.sectorId);
        visibleDepartments = visibleDepartments.filter(d => d.sectorId === currentUser.sectorId);
      } else if (currentUser.role === 'ูุฏูุฑ_ุฅุฏุงุฑุฉ') {
        visibleTasks = visibleTasks.filter(t => t.department === currentUser.departmentId);
        visibleCorrespondence = visibleCorrespondence.filter(c => c.department === currentUser.departmentId);
        visibleEmployees = visibleEmployees.filter(e => e.department === currentUser.departmentId);
        visibleDepartments = visibleDepartments.filter(d => d.id === currentUser.departmentId);
      } else if (currentUser.role === 'ููุธู' || currentUser.role === 'ููู') {
        visibleTasks = visibleTasks.filter(t => 
          t.assignedTo?.includes(currentUser.employeeId || '') || 
          t.createdBy === currentUser.employeeId
        );
        visibleCorrespondence = visibleCorrespondence.filter(c => 
          c.assignedTo === currentUser.employeeId || 
          c.createdBy === currentUser.employeeId
        );
        visibleEmployees = visibleEmployees.filter(e => e.id === currentUser.employeeId);
      }
    }
    
    const totalTasks = visibleTasks.length;
    const completedTasks = visibleTasks.filter(t => t.status === 'ููุชููุฉ').length;
    const inProgressTasks = visibleTasks.filter(t => t.status === 'ููุฏ ุงูุชูููุฐ').length;
    const overdueTasks = visibleTasks.filter(t => t.status === 'ูุชุฃุฎุฑุฉ').length;
    
    const totalCorr = visibleCorrespondence.length;
    const incomingCorr = visibleCorrespondence.filter(c => c.type === 'ูุงุฑุฏ').length;
    const outgoingCorr = visibleCorrespondence.filter(c => c.type === 'ุตุงุฏุฑ').length;
    const urgentCorr = visibleCorrespondence.filter(c => c.urgency === 'ุนุงุฌู' || c.urgency === 'ููุฑู').length;
    
    const totalEmployees = visibleEmployees.length;
    const activeEmployees = visibleEmployees.filter(e => e.status === 'ูุดุท').length;
    
    // ุญุณุงุจ ุงููุฑุงุณูุงุช ุงููุฑุชุจุทุฉ ุจุงูููุงู
    const linkedCorrespondences = visibleCorrespondence.filter(c => c.linkedTaskId).length;
    const linkedTasks = visibleTasks.filter(t => t.linkedCorrespondenceId).length;
    
    // ุญุณุงุจ ูุนุฏู ุงูุฑุจุท ุจูู ุงูููุงู ูุงููุฑุงุณูุงุช
    const integrationRate = totalTasks > 0 ? Math.round((linkedTasks / totalTasks) * 100) : 0;
    
    return {
      totalTasks,
      completedTasks,
      inProgressTasks,
      overdueTasks,
      totalCorr,
      incomingCorr,
      outgoingCorr,
      urgentCorr,
      totalEmployees,
      activeEmployees,
      totalDepartments: visibleDepartments.length,
      totalDivisions: (state.divisions || []).filter(d => 
        visibleDepartments.some(dept => dept.id === d.departmentId)
      ).length,
      linkedCorrespondences,
      linkedTasks,
      integrationRate,
      taskCompletionRate: totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0,
      correspondenceProcessingRate: totalCorr > 0 ? Math.round(((totalCorr - urgentCorr) / totalCorr) * 100) : 0
    };
  }, [state, currentUser]);

  return (
    <div className="space-y-8">
      
      {/* ุจุงูุฑ ุงูุชุฑุญูุจ ุงููุชูุงูู */}
      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 rounded-xl p-8 text-white shadow-lg">
        <div className="flex items-center justify-between">
          <div className="flex-1">
            <h1 className="text-3xl font-bold mb-2">
              ูุฑุญุจุงู ุจู ูู {state.systemSettings.systemName}
            </h1>
            <p className="text-blue-100 text-lg mb-2">
              {state.systemSettings.organizationName}
            </p>
            <p className="text-blue-200 mt-2 flex items-center gap-2">
              <span>๐ค</span>
              <span>ูุฑุญุจุงู {currentUser?.fullName || state.currentUser.name} - {currentUser?.role || state.currentUser.role}</span>
            </p>
            <p className="text-blue-200 mt-2 flex items-center gap-2">
              <span>๐</span>
              <span>
                ุชุงุฑูุฎ ุงูููู: {new Date().toLocaleDateString('ar-EG', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </span>
            </p>
            
            {/* ุฅุญุตุงุฆูุงุช ูุชูุงููุฉ ูู ุงูุจุงูุฑ */}
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mt-6">
              <div className="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
                <div className="text-2xl font-bold">{integratedStats.totalTasks}</div>
                <div className="text-sm text-blue-200">ุฅุฌูุงูู ุงูููุงู</div>
              </div>
              <div className="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
                <div className="text-2xl font-bold">{integratedStats.totalCorr}</div>
                <div className="text-sm text-blue-200">ุฅุฌูุงูู ุงููุฑุงุณูุงุช</div>
              </div>
              <div className="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
                <div className="text-2xl font-bold">{integratedStats.totalEmployees}</div>
                <div className="text-sm text-blue-200">ุฅุฌูุงูู ุงูููุธููู</div>
              </div>
              <div className="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
                <div className="text-2xl font-bold">{integratedStats.totalDepartments}</div>
                <div className="text-sm text-blue-200">ุฅุฌูุงูู ุงูุฅุฏุงุฑุงุช</div>
              </div>
              <div className="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
                <div className="text-2xl font-bold">{integratedStats.integrationRate}%</div>
                <div className="text-sm text-blue-200">ูุนุฏู ุงูุฑุจุท</div>
              </div>
            </div>
          </div>
          
          {/* ุดุนุงุฑ ุงููุธุงู */}
          <div className="hidden lg:block">
            <div className="w-32 h-32 bg-white/10 rounded-full flex items-center justify-center backdrop-blur-sm border-2 border-white/20">
              {state.systemSettings.logo ? (
                <img 
                  src={state.systemSettings.logo} 
                  alt="ุดุนุงุฑ ุงููุธุงู" 
                  className="w-20 h-20 rounded-full object-cover"
                />
              ) : (
                <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center">
                  <span className="text-4xl font-bold">๐๏ธ</span>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* ุงูุฅุญุตุงุฆูุงุช ุงูุฑุฆูุณูุฉ ุงููุญุณูุฉ */}
      <EnhancedStatsCards />

      {/* ุงูุฅุฌุฑุงุกุงุช ุงูุณุฑูุนุฉ ุงููุชูุงููุฉ */}
      <QuickActions />

      {/* ุงูุตู ุงูุฃูู: ุงูููุงู ูุงููุฑุงุณูุงุช */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <TasksChart />
        <CorrespondenceWidget />
      </div>

      {/* ุงูุตู ุงูุซุงูู: ุชุญูููุงุช ุงููุฑุงุณูุงุช ูุงูููุธููู */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <CorrespondenceChart />
        <EmployeesChart />
      </div>

      {/* ุงูุตู ุงูุซุงูุซ: ุฃูุถู ุงูููุธููู ูุงูุชูุจููุงุช */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <TopPerformers />
        <AlertsNotifications />
      </div>

      {/* ุงูุตู ุงูุฑุงุจุน: ุงูุชุญูููุงุช ุงููุชูุฏูุฉ */}

      {/* ุงูุตู ุงูุฎุงูุณ: ุงูุฑุณูู ุงูุจูุงููุฉ ุงููุชูุฏูุฉ ูููุงููุณ ุงูุฃุฏุงุก */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <AdvancedCharts />
        <PerformanceMetrics />
      </div>

      {/* ุงูุตู ุงูุณุงุฏุณ: ุงููุดุงุทุงุช ุงูุฃุฎูุฑุฉ ูููุฎุต ุงููุธุงู */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <RecentActivity />
        <SystemOverview />
      </div>

      {/* ููุฎุต ุงูุชูุงูู ุจูู ุงูุฃูุธูุฉ */}
      <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 border border-green-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">ููุฎุต ุงูุชูุงูู ุจูู ุงูุฃูุธูุฉ</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          
          <div className="text-center p-4 bg-white rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-blue-600">{integratedStats.linkedTasks}</div>
            <div className="text-sm text-blue-800">ููุงู ูุฑุชุจุทุฉ ุจูุฑุงุณูุงุช</div>
          </div>
          
          <div className="text-center p-4 bg-white rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-green-600">{integratedStats.linkedCorrespondences}</div>
            <div className="text-sm text-green-800">ูุฑุงุณูุงุช ูุฑุชุจุทุฉ ุจููุงู</div>
          </div>
          
          <div className="text-center p-4 bg-white rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-purple-600">{integratedStats.integrationRate}%</div>
            <div className="text-sm text-purple-800">ูุนุฏู ุงูุฑุจุท ุงูุนุงู</div>
          </div>
          
          <div className="text-center p-4 bg-white rounded-lg shadow-sm">
            <div className="text-2xl font-bold text-orange-600">
              {Math.round((integratedStats.taskCompletionRate + integratedStats.correspondenceProcessingRate) / 2)}%
            </div>
            <div className="text-sm text-orange-800">ุงูููุงุกุฉ ุงูุนุงูุฉ</div>
          </div>

        </div>
      </div>

    </div>
  );
};

export default IntegratedDashboard;